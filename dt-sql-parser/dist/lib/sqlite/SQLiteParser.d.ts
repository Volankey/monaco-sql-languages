import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";
import { SQLiteParserListener } from "./SQLiteParserListener.js";
import { SQLiteParserVisitor } from "./SQLiteParserVisitor.js";
import { SQLParserBase } from '../SQLParserBase';
export declare class SQLiteParser extends SQLParserBase {
    static readonly SCOL = 1;
    static readonly DOT = 2;
    static readonly OPEN_PAR = 3;
    static readonly CLOSE_PAR = 4;
    static readonly COMMA = 5;
    static readonly ASSIGN = 6;
    static readonly STAR = 7;
    static readonly PLUS = 8;
    static readonly MINUS = 9;
    static readonly TILDE = 10;
    static readonly PIPE2 = 11;
    static readonly DIV = 12;
    static readonly MOD = 13;
    static readonly LT2 = 14;
    static readonly GT2 = 15;
    static readonly AMP = 16;
    static readonly PIPE = 17;
    static readonly LT = 18;
    static readonly LT_EQ = 19;
    static readonly GT = 20;
    static readonly GT_EQ = 21;
    static readonly EQ = 22;
    static readonly NOT_EQ1 = 23;
    static readonly NOT_EQ2 = 24;
    static readonly ABORT_ = 25;
    static readonly ACTION_ = 26;
    static readonly ADD_ = 27;
    static readonly AFTER_ = 28;
    static readonly ALL_ = 29;
    static readonly ALTER_ = 30;
    static readonly ANALYZE_ = 31;
    static readonly AND_ = 32;
    static readonly AS_ = 33;
    static readonly ASC_ = 34;
    static readonly ATTACH_ = 35;
    static readonly AUTOINCREMENT_ = 36;
    static readonly BEFORE_ = 37;
    static readonly BEGIN_ = 38;
    static readonly BETWEEN_ = 39;
    static readonly BY_ = 40;
    static readonly CASCADE_ = 41;
    static readonly CASE_ = 42;
    static readonly CAST_ = 43;
    static readonly CHECK_ = 44;
    static readonly COLLATE_ = 45;
    static readonly COLUMN_ = 46;
    static readonly COMMIT_ = 47;
    static readonly CONFLICT_ = 48;
    static readonly CONSTRAINT_ = 49;
    static readonly CREATE_ = 50;
    static readonly CROSS_ = 51;
    static readonly CURRENT_DATE_ = 52;
    static readonly CURRENT_TIME_ = 53;
    static readonly CURRENT_TIMESTAMP_ = 54;
    static readonly DATABASE_ = 55;
    static readonly DEFAULT_ = 56;
    static readonly DEFERRABLE_ = 57;
    static readonly DEFERRED_ = 58;
    static readonly DELETE_ = 59;
    static readonly DESC_ = 60;
    static readonly DETACH_ = 61;
    static readonly DISTINCT_ = 62;
    static readonly DROP_ = 63;
    static readonly EACH_ = 64;
    static readonly ELSE_ = 65;
    static readonly END_ = 66;
    static readonly ESCAPE_ = 67;
    static readonly EXCEPT_ = 68;
    static readonly EXCLUSIVE_ = 69;
    static readonly EXISTS_ = 70;
    static readonly EXPLAIN_ = 71;
    static readonly FAIL_ = 72;
    static readonly FOR_ = 73;
    static readonly FOREIGN_ = 74;
    static readonly FROM_ = 75;
    static readonly FULL_ = 76;
    static readonly GLOB_ = 77;
    static readonly GROUP_ = 78;
    static readonly HAVING_ = 79;
    static readonly IF_ = 80;
    static readonly IGNORE_ = 81;
    static readonly IMMEDIATE_ = 82;
    static readonly IN_ = 83;
    static readonly INDEX_ = 84;
    static readonly INDEXED_ = 85;
    static readonly INITIALLY_ = 86;
    static readonly INNER_ = 87;
    static readonly INSERT_ = 88;
    static readonly INSTEAD_ = 89;
    static readonly INTERSECT_ = 90;
    static readonly INTO_ = 91;
    static readonly IS_ = 92;
    static readonly ISNULL_ = 93;
    static readonly JOIN_ = 94;
    static readonly KEY_ = 95;
    static readonly LEFT_ = 96;
    static readonly LIKE_ = 97;
    static readonly LIMIT_ = 98;
    static readonly MATCH_ = 99;
    static readonly NATURAL_ = 100;
    static readonly NO_ = 101;
    static readonly NOT_ = 102;
    static readonly NOTNULL_ = 103;
    static readonly NULL_ = 104;
    static readonly OF_ = 105;
    static readonly OFFSET_ = 106;
    static readonly ON_ = 107;
    static readonly OR_ = 108;
    static readonly ORDER_ = 109;
    static readonly OUTER_ = 110;
    static readonly PLAN_ = 111;
    static readonly PRAGMA_ = 112;
    static readonly PRIMARY_ = 113;
    static readonly QUERY_ = 114;
    static readonly RAISE_ = 115;
    static readonly RECURSIVE_ = 116;
    static readonly REFERENCES_ = 117;
    static readonly REGEXP_ = 118;
    static readonly REINDEX_ = 119;
    static readonly RELEASE_ = 120;
    static readonly RENAME_ = 121;
    static readonly REPLACE_ = 122;
    static readonly RESTRICT_ = 123;
    static readonly RETURNING_ = 124;
    static readonly RIGHT_ = 125;
    static readonly ROLLBACK_ = 126;
    static readonly ROW_ = 127;
    static readonly ROWS_ = 128;
    static readonly SAVEPOINT_ = 129;
    static readonly SELECT_ = 130;
    static readonly SET_ = 131;
    static readonly TABLE_ = 132;
    static readonly TEMP_ = 133;
    static readonly TEMPORARY_ = 134;
    static readonly THEN_ = 135;
    static readonly TO_ = 136;
    static readonly TRANSACTION_ = 137;
    static readonly TRIGGER_ = 138;
    static readonly UNION_ = 139;
    static readonly UNIQUE_ = 140;
    static readonly UPDATE_ = 141;
    static readonly USING_ = 142;
    static readonly VACUUM_ = 143;
    static readonly VALUES_ = 144;
    static readonly VIEW_ = 145;
    static readonly VIRTUAL_ = 146;
    static readonly WHEN_ = 147;
    static readonly WHERE_ = 148;
    static readonly WITH_ = 149;
    static readonly WITHOUT_ = 150;
    static readonly FIRST_VALUE_ = 151;
    static readonly OVER_ = 152;
    static readonly PARTITION_ = 153;
    static readonly RANGE_ = 154;
    static readonly PRECEDING_ = 155;
    static readonly UNBOUNDED_ = 156;
    static readonly CURRENT_ = 157;
    static readonly FOLLOWING_ = 158;
    static readonly CUME_DIST_ = 159;
    static readonly DENSE_RANK_ = 160;
    static readonly LAG_ = 161;
    static readonly LAST_VALUE_ = 162;
    static readonly LEAD_ = 163;
    static readonly NTH_VALUE_ = 164;
    static readonly NTILE_ = 165;
    static readonly PERCENT_RANK_ = 166;
    static readonly RANK_ = 167;
    static readonly ROW_NUMBER_ = 168;
    static readonly GENERATED_ = 169;
    static readonly ALWAYS_ = 170;
    static readonly STORED_ = 171;
    static readonly TRUE_ = 172;
    static readonly FALSE_ = 173;
    static readonly WINDOW_ = 174;
    static readonly NULLS_ = 175;
    static readonly FIRST_ = 176;
    static readonly LAST_ = 177;
    static readonly FILTER_ = 178;
    static readonly GROUPS_ = 179;
    static readonly EXCLUDE_ = 180;
    static readonly TIES_ = 181;
    static readonly OTHERS_ = 182;
    static readonly DO_ = 183;
    static readonly NOTHING_ = 184;
    static readonly IDENTIFIER = 185;
    static readonly NUMERIC_LITERAL = 186;
    static readonly BIND_PARAMETER = 187;
    static readonly STRING_LITERAL = 188;
    static readonly BLOB_LITERAL = 189;
    static readonly SINGLE_LINE_COMMENT = 190;
    static readonly MULTILINE_COMMENT = 191;
    static readonly SPACES = 192;
    static readonly UNEXPECTED_CHAR = 193;
    static readonly SEMI = 194;
    static readonly RULE_program = 0;
    static readonly RULE_singleStmt = 1;
    static readonly RULE_parse = 2;
    static readonly RULE_sql_stmt_list = 3;
    static readonly RULE_sql_stmt = 4;
    static readonly RULE_alter_table_stmt = 5;
    static readonly RULE_analyze_stmt = 6;
    static readonly RULE_attach_stmt = 7;
    static readonly RULE_begin_stmt = 8;
    static readonly RULE_commit_stmt = 9;
    static readonly RULE_rollback_stmt = 10;
    static readonly RULE_savepoint_stmt = 11;
    static readonly RULE_release_stmt = 12;
    static readonly RULE_create_index_stmt = 13;
    static readonly RULE_indexed_column = 14;
    static readonly RULE_create_table_stmt = 15;
    static readonly RULE_column_def = 16;
    static readonly RULE_type_name = 17;
    static readonly RULE_column_constraint = 18;
    static readonly RULE_signed_number = 19;
    static readonly RULE_table_constraint = 20;
    static readonly RULE_foreign_key_clause = 21;
    static readonly RULE_conflict_clause = 22;
    static readonly RULE_create_trigger_stmt = 23;
    static readonly RULE_create_view_stmt = 24;
    static readonly RULE_create_virtual_table_stmt = 25;
    static readonly RULE_with_clause = 26;
    static readonly RULE_cte_table_name = 27;
    static readonly RULE_recursive_cte = 28;
    static readonly RULE_common_table_expression = 29;
    static readonly RULE_delete_stmt = 30;
    static readonly RULE_delete_stmt_limited = 31;
    static readonly RULE_detach_stmt = 32;
    static readonly RULE_drop_stmt = 33;
    static readonly RULE_expr = 34;
    static readonly RULE_raise_function = 35;
    static readonly RULE_literal_value = 36;
    static readonly RULE_value_row = 37;
    static readonly RULE_values_clause = 38;
    static readonly RULE_insert_stmt = 39;
    static readonly RULE_returning_clause = 40;
    static readonly RULE_upsert_clause = 41;
    static readonly RULE_pragma_stmt = 42;
    static readonly RULE_pragma_value = 43;
    static readonly RULE_reindex_stmt = 44;
    static readonly RULE_select_stmt = 45;
    static readonly RULE_join_clause = 46;
    static readonly RULE_select_core = 47;
    static readonly RULE_factored_select_stmt = 48;
    static readonly RULE_simple_select_stmt = 49;
    static readonly RULE_compound_select_stmt = 50;
    static readonly RULE_table_or_subquery = 51;
    static readonly RULE_result_column = 52;
    static readonly RULE_join_operator = 53;
    static readonly RULE_join_constraint = 54;
    static readonly RULE_compound_operator = 55;
    static readonly RULE_update_stmt = 56;
    static readonly RULE_column_name_list = 57;
    static readonly RULE_update_stmt_limited = 58;
    static readonly RULE_qualified_table_name = 59;
    static readonly RULE_vacuum_stmt = 60;
    static readonly RULE_filter_clause = 61;
    static readonly RULE_window_defn = 62;
    static readonly RULE_over_clause = 63;
    static readonly RULE_frame_spec = 64;
    static readonly RULE_frame_clause = 65;
    static readonly RULE_simple_function_invocation = 66;
    static readonly RULE_aggregate_function_invocation = 67;
    static readonly RULE_window_function_invocation = 68;
    static readonly RULE_common_table_stmt = 69;
    static readonly RULE_order_by_stmt = 70;
    static readonly RULE_limit_stmt = 71;
    static readonly RULE_ordering_term = 72;
    static readonly RULE_asc_desc = 73;
    static readonly RULE_frame_left = 74;
    static readonly RULE_frame_right = 75;
    static readonly RULE_frame_single = 76;
    static readonly RULE_window_function = 77;
    static readonly RULE_offset = 78;
    static readonly RULE_default_value = 79;
    static readonly RULE_partition_by = 80;
    static readonly RULE_order_by_expr = 81;
    static readonly RULE_order_by_expr_asc_desc = 82;
    static readonly RULE_expr_asc_desc = 83;
    static readonly RULE_initial_select = 84;
    static readonly RULE_recursive_select = 85;
    static readonly RULE_unary_operator = 86;
    static readonly RULE_error_message = 87;
    static readonly RULE_module_argument = 88;
    static readonly RULE_column_alias = 89;
    static readonly RULE_keyword = 90;
    static readonly RULE_name = 91;
    static readonly RULE_function_name = 92;
    static readonly RULE_schema_name = 93;
    static readonly RULE_table_name = 94;
    static readonly RULE_table_or_index_name = 95;
    static readonly RULE_column_name = 96;
    static readonly RULE_collation_name = 97;
    static readonly RULE_foreign_table = 98;
    static readonly RULE_index_name = 99;
    static readonly RULE_trigger_name = 100;
    static readonly RULE_view_name = 101;
    static readonly RULE_module_name = 102;
    static readonly RULE_pragma_name = 103;
    static readonly RULE_savepoint_name = 104;
    static readonly RULE_table_alias = 105;
    static readonly RULE_transaction_name = 106;
    static readonly RULE_window_name = 107;
    static readonly RULE_alias = 108;
    static readonly RULE_filename = 109;
    static readonly RULE_base_window_name = 110;
    static readonly RULE_simple_func = 111;
    static readonly RULE_aggregate_func = 112;
    static readonly RULE_table_function_name = 113;
    static readonly RULE_any_name = 114;
    static readonly literalNames: (string | null)[];
    static readonly symbolicNames: (string | null)[];
    static readonly ruleNames: string[];
    get grammarFileName(): string;
    get literalNames(): (string | null)[];
    get symbolicNames(): (string | null)[];
    get ruleNames(): string[];
    get serializedATN(): number[];
    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException;
    constructor(input: antlr.TokenStream);
    program(): ProgramContext;
    singleStmt(): SingleStmtContext;
    parse(): ParseContext;
    sql_stmt_list(): Sql_stmt_listContext;
    sql_stmt(): Sql_stmtContext;
    alter_table_stmt(): Alter_table_stmtContext;
    analyze_stmt(): Analyze_stmtContext;
    attach_stmt(): Attach_stmtContext;
    begin_stmt(): Begin_stmtContext;
    commit_stmt(): Commit_stmtContext;
    rollback_stmt(): Rollback_stmtContext;
    savepoint_stmt(): Savepoint_stmtContext;
    release_stmt(): Release_stmtContext;
    create_index_stmt(): Create_index_stmtContext;
    indexed_column(): Indexed_columnContext;
    create_table_stmt(): Create_table_stmtContext;
    column_def(): Column_defContext;
    type_name(): Type_nameContext;
    column_constraint(): Column_constraintContext;
    signed_number(): Signed_numberContext;
    table_constraint(): Table_constraintContext;
    foreign_key_clause(): Foreign_key_clauseContext;
    conflict_clause(): Conflict_clauseContext;
    create_trigger_stmt(): Create_trigger_stmtContext;
    create_view_stmt(): Create_view_stmtContext;
    create_virtual_table_stmt(): Create_virtual_table_stmtContext;
    with_clause(): With_clauseContext;
    cte_table_name(): Cte_table_nameContext;
    recursive_cte(): Recursive_cteContext;
    common_table_expression(): Common_table_expressionContext;
    delete_stmt(): Delete_stmtContext;
    delete_stmt_limited(): Delete_stmt_limitedContext;
    detach_stmt(): Detach_stmtContext;
    drop_stmt(): Drop_stmtContext;
    expr(): ExprContext;
    expr(_p: number): ExprContext;
    raise_function(): Raise_functionContext;
    literal_value(): Literal_valueContext;
    value_row(): Value_rowContext;
    values_clause(): Values_clauseContext;
    insert_stmt(): Insert_stmtContext;
    returning_clause(): Returning_clauseContext;
    upsert_clause(): Upsert_clauseContext;
    pragma_stmt(): Pragma_stmtContext;
    pragma_value(): Pragma_valueContext;
    reindex_stmt(): Reindex_stmtContext;
    select_stmt(): Select_stmtContext;
    join_clause(): Join_clauseContext;
    select_core(): Select_coreContext;
    factored_select_stmt(): Factored_select_stmtContext;
    simple_select_stmt(): Simple_select_stmtContext;
    compound_select_stmt(): Compound_select_stmtContext;
    table_or_subquery(): Table_or_subqueryContext;
    result_column(): Result_columnContext;
    join_operator(): Join_operatorContext;
    join_constraint(): Join_constraintContext;
    compound_operator(): Compound_operatorContext;
    update_stmt(): Update_stmtContext;
    column_name_list(): Column_name_listContext;
    update_stmt_limited(): Update_stmt_limitedContext;
    qualified_table_name(): Qualified_table_nameContext;
    vacuum_stmt(): Vacuum_stmtContext;
    filter_clause(): Filter_clauseContext;
    window_defn(): Window_defnContext;
    over_clause(): Over_clauseContext;
    frame_spec(): Frame_specContext;
    frame_clause(): Frame_clauseContext;
    simple_function_invocation(): Simple_function_invocationContext;
    aggregate_function_invocation(): Aggregate_function_invocationContext;
    window_function_invocation(): Window_function_invocationContext;
    common_table_stmt(): Common_table_stmtContext;
    order_by_stmt(): Order_by_stmtContext;
    limit_stmt(): Limit_stmtContext;
    ordering_term(): Ordering_termContext;
    asc_desc(): Asc_descContext;
    frame_left(): Frame_leftContext;
    frame_right(): Frame_rightContext;
    frame_single(): Frame_singleContext;
    window_function(): Window_functionContext;
    offset(): OffsetContext;
    default_value(): Default_valueContext;
    partition_by(): Partition_byContext;
    order_by_expr(): Order_by_exprContext;
    order_by_expr_asc_desc(): Order_by_expr_asc_descContext;
    expr_asc_desc(): Expr_asc_descContext;
    initial_select(): Initial_selectContext;
    recursive_select(): Recursive_selectContext;
    unary_operator(): Unary_operatorContext;
    error_message(): Error_messageContext;
    module_argument(): Module_argumentContext;
    column_alias(): Column_aliasContext;
    keyword(): KeywordContext;
    name(): NameContext;
    function_name(): Function_nameContext;
    schema_name(): Schema_nameContext;
    table_name(): Table_nameContext;
    table_or_index_name(): Table_or_index_nameContext;
    column_name(): Column_nameContext;
    collation_name(): Collation_nameContext;
    foreign_table(): Foreign_tableContext;
    index_name(): Index_nameContext;
    trigger_name(): Trigger_nameContext;
    view_name(): View_nameContext;
    module_name(): Module_nameContext;
    pragma_name(): Pragma_nameContext;
    savepoint_name(): Savepoint_nameContext;
    table_alias(): Table_aliasContext;
    transaction_name(): Transaction_nameContext;
    window_name(): Window_nameContext;
    alias(): AliasContext;
    filename(): FilenameContext;
    base_window_name(): Base_window_nameContext;
    simple_func(): Simple_funcContext;
    aggregate_func(): Aggregate_funcContext;
    table_function_name(): Table_function_nameContext;
    any_name(): Any_nameContext;
    sempred(localContext: antlr.RuleContext | null, ruleIndex: number, predIndex: number): boolean;
    private expr_sempred;
    static readonly _serializedATN: number[];
    private static __ATN;
    static get _ATN(): antlr.ATN;
    private static readonly vocabulary;
    get vocabulary(): antlr.Vocabulary;
    private static readonly decisionsToDFA;
}
export declare class ProgramContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EOF(): antlr.TerminalNode;
    sql_stmt_list(): Sql_stmt_listContext[];
    sql_stmt_list(i: number): Sql_stmt_listContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class SingleStmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sql_stmt(): Sql_stmtContext;
    SEMI(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class ParseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EOF(): antlr.TerminalNode;
    sql_stmt_list(): Sql_stmt_listContext[];
    sql_stmt_list(i: number): Sql_stmt_listContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Sql_stmt_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sql_stmt(): Sql_stmtContext[];
    sql_stmt(i: number): Sql_stmtContext | null;
    SCOL(): antlr.TerminalNode[];
    SCOL(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Sql_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    alter_table_stmt(): Alter_table_stmtContext | null;
    analyze_stmt(): Analyze_stmtContext | null;
    attach_stmt(): Attach_stmtContext | null;
    begin_stmt(): Begin_stmtContext | null;
    commit_stmt(): Commit_stmtContext | null;
    create_index_stmt(): Create_index_stmtContext | null;
    create_table_stmt(): Create_table_stmtContext | null;
    create_trigger_stmt(): Create_trigger_stmtContext | null;
    create_view_stmt(): Create_view_stmtContext | null;
    create_virtual_table_stmt(): Create_virtual_table_stmtContext | null;
    delete_stmt(): Delete_stmtContext | null;
    delete_stmt_limited(): Delete_stmt_limitedContext | null;
    detach_stmt(): Detach_stmtContext | null;
    drop_stmt(): Drop_stmtContext | null;
    insert_stmt(): Insert_stmtContext | null;
    pragma_stmt(): Pragma_stmtContext | null;
    reindex_stmt(): Reindex_stmtContext | null;
    release_stmt(): Release_stmtContext | null;
    rollback_stmt(): Rollback_stmtContext | null;
    savepoint_stmt(): Savepoint_stmtContext | null;
    select_stmt(): Select_stmtContext | null;
    update_stmt(): Update_stmtContext | null;
    update_stmt_limited(): Update_stmt_limitedContext | null;
    vacuum_stmt(): Vacuum_stmtContext | null;
    EXPLAIN_(): antlr.TerminalNode | null;
    QUERY_(): antlr.TerminalNode | null;
    PLAN_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Alter_table_stmtContext extends antlr.ParserRuleContext {
    _new_table_name?: Table_nameContext;
    _old_column_name?: Column_nameContext;
    _new_column_name?: Column_nameContext;
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER_(): antlr.TerminalNode;
    TABLE_(): antlr.TerminalNode;
    table_name(): Table_nameContext[];
    table_name(i: number): Table_nameContext | null;
    RENAME_(): antlr.TerminalNode | null;
    ADD_(): antlr.TerminalNode | null;
    column_def(): Column_defContext | null;
    DROP_(): antlr.TerminalNode | null;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext | null;
    schema_name(): Schema_nameContext | null;
    DOT(): antlr.TerminalNode | null;
    TO_(): antlr.TerminalNode | null;
    COLUMN_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Analyze_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ANALYZE_(): antlr.TerminalNode;
    schema_name(): Schema_nameContext | null;
    table_or_index_name(): Table_or_index_nameContext | null;
    DOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Attach_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ATTACH_(): antlr.TerminalNode;
    expr(): ExprContext;
    AS_(): antlr.TerminalNode;
    schema_name(): Schema_nameContext;
    DATABASE_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Begin_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BEGIN_(): antlr.TerminalNode;
    TRANSACTION_(): antlr.TerminalNode | null;
    DEFERRED_(): antlr.TerminalNode | null;
    IMMEDIATE_(): antlr.TerminalNode | null;
    EXCLUSIVE_(): antlr.TerminalNode | null;
    transaction_name(): Transaction_nameContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Commit_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COMMIT_(): antlr.TerminalNode | null;
    END_(): antlr.TerminalNode | null;
    TRANSACTION_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Rollback_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ROLLBACK_(): antlr.TerminalNode;
    TRANSACTION_(): antlr.TerminalNode | null;
    TO_(): antlr.TerminalNode | null;
    savepoint_name(): Savepoint_nameContext | null;
    SAVEPOINT_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Savepoint_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SAVEPOINT_(): antlr.TerminalNode;
    savepoint_name(): Savepoint_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Release_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RELEASE_(): antlr.TerminalNode;
    savepoint_name(): Savepoint_nameContext;
    SAVEPOINT_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Create_index_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE_(): antlr.TerminalNode;
    INDEX_(): antlr.TerminalNode;
    index_name(): Index_nameContext;
    ON_(): antlr.TerminalNode;
    table_name(): Table_nameContext;
    OPEN_PAR(): antlr.TerminalNode;
    indexed_column(): Indexed_columnContext[];
    indexed_column(i: number): Indexed_columnContext | null;
    CLOSE_PAR(): antlr.TerminalNode;
    UNIQUE_(): antlr.TerminalNode | null;
    IF_(): antlr.TerminalNode | null;
    NOT_(): antlr.TerminalNode | null;
    EXISTS_(): antlr.TerminalNode | null;
    schema_name(): Schema_nameContext | null;
    DOT(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    WHERE_(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Indexed_columnContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    column_name(): Column_nameContext | null;
    expr(): ExprContext | null;
    COLLATE_(): antlr.TerminalNode | null;
    collation_name(): Collation_nameContext | null;
    asc_desc(): Asc_descContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Create_table_stmtContext extends antlr.ParserRuleContext {
    _row_ROW_ID?: Token | null;
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE_(): antlr.TerminalNode;
    TABLE_(): antlr.TerminalNode;
    table_name(): Table_nameContext;
    OPEN_PAR(): antlr.TerminalNode | null;
    column_def(): Column_defContext[];
    column_def(i: number): Column_defContext | null;
    CLOSE_PAR(): antlr.TerminalNode | null;
    AS_(): antlr.TerminalNode | null;
    select_stmt(): Select_stmtContext | null;
    IF_(): antlr.TerminalNode | null;
    NOT_(): antlr.TerminalNode | null;
    EXISTS_(): antlr.TerminalNode | null;
    schema_name(): Schema_nameContext | null;
    DOT(): antlr.TerminalNode | null;
    TEMP_(): antlr.TerminalNode | null;
    TEMPORARY_(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    table_constraint(): Table_constraintContext[];
    table_constraint(i: number): Table_constraintContext | null;
    WITHOUT_(): antlr.TerminalNode | null;
    IDENTIFIER(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Column_defContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    column_name(): Column_nameContext;
    type_name(): Type_nameContext | null;
    column_constraint(): Column_constraintContext[];
    column_constraint(i: number): Column_constraintContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Type_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    name(): NameContext[];
    name(i: number): NameContext | null;
    OPEN_PAR(): antlr.TerminalNode | null;
    signed_number(): Signed_numberContext[];
    signed_number(i: number): Signed_numberContext | null;
    CLOSE_PAR(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Column_constraintContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CHECK_(): antlr.TerminalNode | null;
    OPEN_PAR(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    CLOSE_PAR(): antlr.TerminalNode | null;
    DEFAULT_(): antlr.TerminalNode | null;
    COLLATE_(): antlr.TerminalNode | null;
    collation_name(): Collation_nameContext | null;
    foreign_key_clause(): Foreign_key_clauseContext | null;
    AS_(): antlr.TerminalNode | null;
    CONSTRAINT_(): antlr.TerminalNode | null;
    name(): NameContext | null;
    PRIMARY_(): antlr.TerminalNode | null;
    KEY_(): antlr.TerminalNode | null;
    NULL_(): antlr.TerminalNode | null;
    UNIQUE_(): antlr.TerminalNode | null;
    signed_number(): Signed_numberContext | null;
    literal_value(): Literal_valueContext | null;
    conflict_clause(): Conflict_clauseContext | null;
    GENERATED_(): antlr.TerminalNode | null;
    ALWAYS_(): antlr.TerminalNode | null;
    STORED_(): antlr.TerminalNode | null;
    VIRTUAL_(): antlr.TerminalNode | null;
    asc_desc(): Asc_descContext | null;
    AUTOINCREMENT_(): antlr.TerminalNode | null;
    NOT_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Signed_numberContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NUMERIC_LITERAL(): antlr.TerminalNode;
    PLUS(): antlr.TerminalNode | null;
    MINUS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Table_constraintContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAR(): antlr.TerminalNode | null;
    indexed_column(): Indexed_columnContext[];
    indexed_column(i: number): Indexed_columnContext | null;
    CLOSE_PAR(): antlr.TerminalNode | null;
    CHECK_(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    FOREIGN_(): antlr.TerminalNode | null;
    KEY_(): antlr.TerminalNode | null;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext | null;
    foreign_key_clause(): Foreign_key_clauseContext | null;
    CONSTRAINT_(): antlr.TerminalNode | null;
    name(): NameContext | null;
    PRIMARY_(): antlr.TerminalNode | null;
    UNIQUE_(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    conflict_clause(): Conflict_clauseContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Foreign_key_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    REFERENCES_(): antlr.TerminalNode;
    foreign_table(): Foreign_tableContext;
    OPEN_PAR(): antlr.TerminalNode | null;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext | null;
    CLOSE_PAR(): antlr.TerminalNode | null;
    ON_(): antlr.TerminalNode[];
    ON_(i: number): antlr.TerminalNode | null;
    MATCH_(): antlr.TerminalNode[];
    MATCH_(i: number): antlr.TerminalNode | null;
    name(): NameContext[];
    name(i: number): NameContext | null;
    DEFERRABLE_(): antlr.TerminalNode | null;
    DELETE_(): antlr.TerminalNode[];
    DELETE_(i: number): antlr.TerminalNode | null;
    UPDATE_(): antlr.TerminalNode[];
    UPDATE_(i: number): antlr.TerminalNode | null;
    SET_(): antlr.TerminalNode[];
    SET_(i: number): antlr.TerminalNode | null;
    CASCADE_(): antlr.TerminalNode[];
    CASCADE_(i: number): antlr.TerminalNode | null;
    RESTRICT_(): antlr.TerminalNode[];
    RESTRICT_(i: number): antlr.TerminalNode | null;
    NO_(): antlr.TerminalNode[];
    NO_(i: number): antlr.TerminalNode | null;
    ACTION_(): antlr.TerminalNode[];
    ACTION_(i: number): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    NULL_(): antlr.TerminalNode[];
    NULL_(i: number): antlr.TerminalNode | null;
    DEFAULT_(): antlr.TerminalNode[];
    DEFAULT_(i: number): antlr.TerminalNode | null;
    NOT_(): antlr.TerminalNode | null;
    INITIALLY_(): antlr.TerminalNode | null;
    DEFERRED_(): antlr.TerminalNode | null;
    IMMEDIATE_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Conflict_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ON_(): antlr.TerminalNode;
    CONFLICT_(): antlr.TerminalNode;
    ROLLBACK_(): antlr.TerminalNode | null;
    ABORT_(): antlr.TerminalNode | null;
    FAIL_(): antlr.TerminalNode | null;
    IGNORE_(): antlr.TerminalNode | null;
    REPLACE_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Create_trigger_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE_(): antlr.TerminalNode;
    TRIGGER_(): antlr.TerminalNode;
    trigger_name(): Trigger_nameContext;
    ON_(): antlr.TerminalNode;
    table_name(): Table_nameContext;
    BEGIN_(): antlr.TerminalNode;
    END_(): antlr.TerminalNode;
    DELETE_(): antlr.TerminalNode | null;
    INSERT_(): antlr.TerminalNode | null;
    UPDATE_(): antlr.TerminalNode | null;
    IF_(): antlr.TerminalNode | null;
    NOT_(): antlr.TerminalNode | null;
    EXISTS_(): antlr.TerminalNode | null;
    schema_name(): Schema_nameContext | null;
    DOT(): antlr.TerminalNode | null;
    BEFORE_(): antlr.TerminalNode | null;
    AFTER_(): antlr.TerminalNode | null;
    INSTEAD_(): antlr.TerminalNode | null;
    OF_(): antlr.TerminalNode[];
    OF_(i: number): antlr.TerminalNode | null;
    FOR_(): antlr.TerminalNode | null;
    EACH_(): antlr.TerminalNode | null;
    ROW_(): antlr.TerminalNode | null;
    WHEN_(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    SCOL(): antlr.TerminalNode[];
    SCOL(i: number): antlr.TerminalNode | null;
    TEMP_(): antlr.TerminalNode | null;
    TEMPORARY_(): antlr.TerminalNode | null;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext | null;
    update_stmt(): Update_stmtContext[];
    update_stmt(i: number): Update_stmtContext | null;
    insert_stmt(): Insert_stmtContext[];
    insert_stmt(i: number): Insert_stmtContext | null;
    delete_stmt(): Delete_stmtContext[];
    delete_stmt(i: number): Delete_stmtContext | null;
    select_stmt(): Select_stmtContext[];
    select_stmt(i: number): Select_stmtContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Create_view_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE_(): antlr.TerminalNode;
    VIEW_(): antlr.TerminalNode;
    view_name(): View_nameContext;
    AS_(): antlr.TerminalNode;
    select_stmt(): Select_stmtContext;
    IF_(): antlr.TerminalNode | null;
    NOT_(): antlr.TerminalNode | null;
    EXISTS_(): antlr.TerminalNode | null;
    schema_name(): Schema_nameContext | null;
    DOT(): antlr.TerminalNode | null;
    OPEN_PAR(): antlr.TerminalNode | null;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext | null;
    CLOSE_PAR(): antlr.TerminalNode | null;
    TEMP_(): antlr.TerminalNode | null;
    TEMPORARY_(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Create_virtual_table_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE_(): antlr.TerminalNode;
    VIRTUAL_(): antlr.TerminalNode;
    TABLE_(): antlr.TerminalNode;
    table_name(): Table_nameContext;
    USING_(): antlr.TerminalNode;
    module_name(): Module_nameContext;
    IF_(): antlr.TerminalNode | null;
    NOT_(): antlr.TerminalNode | null;
    EXISTS_(): antlr.TerminalNode | null;
    schema_name(): Schema_nameContext | null;
    DOT(): antlr.TerminalNode | null;
    OPEN_PAR(): antlr.TerminalNode | null;
    module_argument(): Module_argumentContext[];
    module_argument(i: number): Module_argumentContext | null;
    CLOSE_PAR(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class With_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH_(): antlr.TerminalNode;
    cte_table_name(): Cte_table_nameContext[];
    cte_table_name(i: number): Cte_table_nameContext | null;
    AS_(): antlr.TerminalNode[];
    AS_(i: number): antlr.TerminalNode | null;
    OPEN_PAR(): antlr.TerminalNode[];
    OPEN_PAR(i: number): antlr.TerminalNode | null;
    select_stmt(): Select_stmtContext[];
    select_stmt(i: number): Select_stmtContext | null;
    CLOSE_PAR(): antlr.TerminalNode[];
    CLOSE_PAR(i: number): antlr.TerminalNode | null;
    RECURSIVE_(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Cte_table_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    table_name(): Table_nameContext;
    OPEN_PAR(): antlr.TerminalNode | null;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext | null;
    CLOSE_PAR(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Recursive_cteContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    cte_table_name(): Cte_table_nameContext;
    AS_(): antlr.TerminalNode;
    OPEN_PAR(): antlr.TerminalNode;
    initial_select(): Initial_selectContext;
    UNION_(): antlr.TerminalNode;
    recursive_select(): Recursive_selectContext;
    CLOSE_PAR(): antlr.TerminalNode;
    ALL_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Common_table_expressionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    table_name(): Table_nameContext;
    AS_(): antlr.TerminalNode;
    OPEN_PAR(): antlr.TerminalNode[];
    OPEN_PAR(i: number): antlr.TerminalNode | null;
    select_stmt(): Select_stmtContext;
    CLOSE_PAR(): antlr.TerminalNode[];
    CLOSE_PAR(i: number): antlr.TerminalNode | null;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Delete_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DELETE_(): antlr.TerminalNode;
    FROM_(): antlr.TerminalNode;
    qualified_table_name(): Qualified_table_nameContext;
    with_clause(): With_clauseContext | null;
    WHERE_(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    returning_clause(): Returning_clauseContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Delete_stmt_limitedContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DELETE_(): antlr.TerminalNode;
    FROM_(): antlr.TerminalNode;
    qualified_table_name(): Qualified_table_nameContext;
    with_clause(): With_clauseContext | null;
    WHERE_(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    returning_clause(): Returning_clauseContext | null;
    limit_stmt(): Limit_stmtContext | null;
    order_by_stmt(): Order_by_stmtContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Detach_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DETACH_(): antlr.TerminalNode;
    schema_name(): Schema_nameContext;
    DATABASE_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Drop_stmtContext extends antlr.ParserRuleContext {
    _object?: Token | null;
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP_(): antlr.TerminalNode;
    any_name(): Any_nameContext;
    INDEX_(): antlr.TerminalNode | null;
    TABLE_(): antlr.TerminalNode | null;
    TRIGGER_(): antlr.TerminalNode | null;
    VIEW_(): antlr.TerminalNode | null;
    IF_(): antlr.TerminalNode | null;
    EXISTS_(): antlr.TerminalNode | null;
    schema_name(): Schema_nameContext | null;
    DOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class ExprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    literal_value(): Literal_valueContext | null;
    BIND_PARAMETER(): antlr.TerminalNode | null;
    column_name(): Column_nameContext | null;
    table_name(): Table_nameContext | null;
    DOT(): antlr.TerminalNode[];
    DOT(i: number): antlr.TerminalNode | null;
    schema_name(): Schema_nameContext | null;
    unary_operator(): Unary_operatorContext | null;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    function_name(): Function_nameContext | null;
    OPEN_PAR(): antlr.TerminalNode | null;
    CLOSE_PAR(): antlr.TerminalNode | null;
    STAR(): antlr.TerminalNode | null;
    filter_clause(): Filter_clauseContext | null;
    over_clause(): Over_clauseContext | null;
    DISTINCT_(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    CAST_(): antlr.TerminalNode | null;
    AS_(): antlr.TerminalNode | null;
    type_name(): Type_nameContext | null;
    select_stmt(): Select_stmtContext | null;
    EXISTS_(): antlr.TerminalNode | null;
    NOT_(): antlr.TerminalNode | null;
    CASE_(): antlr.TerminalNode | null;
    END_(): antlr.TerminalNode | null;
    WHEN_(): antlr.TerminalNode[];
    WHEN_(i: number): antlr.TerminalNode | null;
    THEN_(): antlr.TerminalNode[];
    THEN_(i: number): antlr.TerminalNode | null;
    ELSE_(): antlr.TerminalNode | null;
    raise_function(): Raise_functionContext | null;
    PIPE2(): antlr.TerminalNode | null;
    DIV(): antlr.TerminalNode | null;
    MOD(): antlr.TerminalNode | null;
    PLUS(): antlr.TerminalNode | null;
    MINUS(): antlr.TerminalNode | null;
    LT2(): antlr.TerminalNode | null;
    GT2(): antlr.TerminalNode | null;
    AMP(): antlr.TerminalNode | null;
    PIPE(): antlr.TerminalNode | null;
    LT(): antlr.TerminalNode | null;
    LT_EQ(): antlr.TerminalNode | null;
    GT(): antlr.TerminalNode | null;
    GT_EQ(): antlr.TerminalNode | null;
    ASSIGN(): antlr.TerminalNode | null;
    EQ(): antlr.TerminalNode | null;
    NOT_EQ1(): antlr.TerminalNode | null;
    NOT_EQ2(): antlr.TerminalNode | null;
    IS_(): antlr.TerminalNode | null;
    FROM_(): antlr.TerminalNode | null;
    IN_(): antlr.TerminalNode | null;
    LIKE_(): antlr.TerminalNode | null;
    GLOB_(): antlr.TerminalNode | null;
    MATCH_(): antlr.TerminalNode | null;
    REGEXP_(): antlr.TerminalNode | null;
    AND_(): antlr.TerminalNode | null;
    OR_(): antlr.TerminalNode | null;
    BETWEEN_(): antlr.TerminalNode | null;
    COLLATE_(): antlr.TerminalNode | null;
    collation_name(): Collation_nameContext | null;
    ESCAPE_(): antlr.TerminalNode | null;
    ISNULL_(): antlr.TerminalNode | null;
    NOTNULL_(): antlr.TerminalNode | null;
    NULL_(): antlr.TerminalNode | null;
    table_function_name(): Table_function_nameContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Raise_functionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RAISE_(): antlr.TerminalNode;
    OPEN_PAR(): antlr.TerminalNode;
    CLOSE_PAR(): antlr.TerminalNode;
    IGNORE_(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode | null;
    error_message(): Error_messageContext | null;
    ROLLBACK_(): antlr.TerminalNode | null;
    ABORT_(): antlr.TerminalNode | null;
    FAIL_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Literal_valueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NUMERIC_LITERAL(): antlr.TerminalNode | null;
    STRING_LITERAL(): antlr.TerminalNode | null;
    BLOB_LITERAL(): antlr.TerminalNode | null;
    NULL_(): antlr.TerminalNode | null;
    TRUE_(): antlr.TerminalNode | null;
    FALSE_(): antlr.TerminalNode | null;
    CURRENT_TIME_(): antlr.TerminalNode | null;
    CURRENT_DATE_(): antlr.TerminalNode | null;
    CURRENT_TIMESTAMP_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Value_rowContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAR(): antlr.TerminalNode;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    CLOSE_PAR(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Values_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    VALUES_(): antlr.TerminalNode;
    value_row(): Value_rowContext[];
    value_row(i: number): Value_rowContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Insert_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INTO_(): antlr.TerminalNode;
    table_name(): Table_nameContext;
    INSERT_(): antlr.TerminalNode | null;
    REPLACE_(): antlr.TerminalNode | null;
    OR_(): antlr.TerminalNode | null;
    DEFAULT_(): antlr.TerminalNode | null;
    VALUES_(): antlr.TerminalNode | null;
    with_clause(): With_clauseContext | null;
    ROLLBACK_(): antlr.TerminalNode | null;
    ABORT_(): antlr.TerminalNode | null;
    FAIL_(): antlr.TerminalNode | null;
    IGNORE_(): antlr.TerminalNode | null;
    schema_name(): Schema_nameContext | null;
    DOT(): antlr.TerminalNode | null;
    AS_(): antlr.TerminalNode | null;
    table_alias(): Table_aliasContext | null;
    OPEN_PAR(): antlr.TerminalNode | null;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext | null;
    CLOSE_PAR(): antlr.TerminalNode | null;
    returning_clause(): Returning_clauseContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    values_clause(): Values_clauseContext | null;
    select_stmt(): Select_stmtContext | null;
    upsert_clause(): Upsert_clauseContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Returning_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RETURNING_(): antlr.TerminalNode;
    result_column(): Result_columnContext[];
    result_column(i: number): Result_columnContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Upsert_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ON_(): antlr.TerminalNode;
    CONFLICT_(): antlr.TerminalNode;
    DO_(): antlr.TerminalNode;
    NOTHING_(): antlr.TerminalNode | null;
    UPDATE_(): antlr.TerminalNode | null;
    SET_(): antlr.TerminalNode | null;
    OPEN_PAR(): antlr.TerminalNode | null;
    indexed_column(): Indexed_columnContext[];
    indexed_column(i: number): Indexed_columnContext | null;
    CLOSE_PAR(): antlr.TerminalNode | null;
    ASSIGN(): antlr.TerminalNode[];
    ASSIGN(i: number): antlr.TerminalNode | null;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    WHERE_(): antlr.TerminalNode[];
    WHERE_(i: number): antlr.TerminalNode | null;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext | null;
    column_name_list(): Column_name_listContext[];
    column_name_list(i: number): Column_name_listContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Pragma_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PRAGMA_(): antlr.TerminalNode;
    pragma_name(): Pragma_nameContext;
    schema_name(): Schema_nameContext | null;
    DOT(): antlr.TerminalNode | null;
    ASSIGN(): antlr.TerminalNode | null;
    pragma_value(): Pragma_valueContext | null;
    OPEN_PAR(): antlr.TerminalNode | null;
    CLOSE_PAR(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Pragma_valueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    signed_number(): Signed_numberContext | null;
    name(): NameContext | null;
    STRING_LITERAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Reindex_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    REINDEX_(): antlr.TerminalNode;
    collation_name(): Collation_nameContext | null;
    table_name(): Table_nameContext | null;
    index_name(): Index_nameContext | null;
    schema_name(): Schema_nameContext | null;
    DOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Select_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    select_core(): Select_coreContext[];
    select_core(i: number): Select_coreContext | null;
    common_table_stmt(): Common_table_stmtContext | null;
    compound_operator(): Compound_operatorContext[];
    compound_operator(i: number): Compound_operatorContext | null;
    order_by_stmt(): Order_by_stmtContext | null;
    limit_stmt(): Limit_stmtContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Join_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    table_or_subquery(): Table_or_subqueryContext[];
    table_or_subquery(i: number): Table_or_subqueryContext | null;
    join_operator(): Join_operatorContext[];
    join_operator(i: number): Join_operatorContext | null;
    join_constraint(): Join_constraintContext[];
    join_constraint(i: number): Join_constraintContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Select_coreContext extends antlr.ParserRuleContext {
    _whereExpr?: ExprContext;
    _expr?: ExprContext;
    _groupByExpr: ExprContext[];
    _havingExpr?: ExprContext;
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SELECT_(): antlr.TerminalNode | null;
    result_column(): Result_columnContext[];
    result_column(i: number): Result_columnContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    FROM_(): antlr.TerminalNode | null;
    WHERE_(): antlr.TerminalNode | null;
    GROUP_(): antlr.TerminalNode | null;
    BY_(): antlr.TerminalNode | null;
    WINDOW_(): antlr.TerminalNode | null;
    window_name(): Window_nameContext[];
    window_name(i: number): Window_nameContext | null;
    AS_(): antlr.TerminalNode[];
    AS_(i: number): antlr.TerminalNode | null;
    window_defn(): Window_defnContext[];
    window_defn(i: number): Window_defnContext | null;
    DISTINCT_(): antlr.TerminalNode | null;
    ALL_(): antlr.TerminalNode | null;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    table_or_subquery(): Table_or_subqueryContext[];
    table_or_subquery(i: number): Table_or_subqueryContext | null;
    join_clause(): Join_clauseContext | null;
    HAVING_(): antlr.TerminalNode | null;
    values_clause(): Values_clauseContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Factored_select_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    select_stmt(): Select_stmtContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Simple_select_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    select_core(): Select_coreContext;
    common_table_stmt(): Common_table_stmtContext | null;
    order_by_stmt(): Order_by_stmtContext | null;
    limit_stmt(): Limit_stmtContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Compound_select_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    select_core(): Select_coreContext[];
    select_core(i: number): Select_coreContext | null;
    common_table_stmt(): Common_table_stmtContext | null;
    order_by_stmt(): Order_by_stmtContext | null;
    limit_stmt(): Limit_stmtContext | null;
    UNION_(): antlr.TerminalNode[];
    UNION_(i: number): antlr.TerminalNode | null;
    INTERSECT_(): antlr.TerminalNode[];
    INTERSECT_(i: number): antlr.TerminalNode | null;
    EXCEPT_(): antlr.TerminalNode[];
    EXCEPT_(i: number): antlr.TerminalNode | null;
    ALL_(): antlr.TerminalNode[];
    ALL_(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Table_or_subqueryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    table_name(): Table_nameContext | null;
    schema_name(): Schema_nameContext | null;
    DOT(): antlr.TerminalNode | null;
    table_alias(): Table_aliasContext | null;
    INDEXED_(): antlr.TerminalNode | null;
    BY_(): antlr.TerminalNode | null;
    index_name(): Index_nameContext | null;
    NOT_(): antlr.TerminalNode | null;
    AS_(): antlr.TerminalNode | null;
    table_function_name(): Table_function_nameContext | null;
    OPEN_PAR(): antlr.TerminalNode | null;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    CLOSE_PAR(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    table_or_subquery(): Table_or_subqueryContext[];
    table_or_subquery(i: number): Table_or_subqueryContext | null;
    join_clause(): Join_clauseContext | null;
    select_stmt(): Select_stmtContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Result_columnContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    STAR(): antlr.TerminalNode | null;
    table_name(): Table_nameContext | null;
    DOT(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    column_alias(): Column_aliasContext | null;
    AS_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Join_operatorContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COMMA(): antlr.TerminalNode | null;
    JOIN_(): antlr.TerminalNode | null;
    NATURAL_(): antlr.TerminalNode | null;
    INNER_(): antlr.TerminalNode | null;
    CROSS_(): antlr.TerminalNode | null;
    LEFT_(): antlr.TerminalNode | null;
    RIGHT_(): antlr.TerminalNode | null;
    FULL_(): antlr.TerminalNode | null;
    OUTER_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Join_constraintContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ON_(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    USING_(): antlr.TerminalNode | null;
    OPEN_PAR(): antlr.TerminalNode | null;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext | null;
    CLOSE_PAR(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Compound_operatorContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    UNION_(): antlr.TerminalNode | null;
    ALL_(): antlr.TerminalNode | null;
    INTERSECT_(): antlr.TerminalNode | null;
    EXCEPT_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Update_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    UPDATE_(): antlr.TerminalNode;
    qualified_table_name(): Qualified_table_nameContext;
    SET_(): antlr.TerminalNode;
    ASSIGN(): antlr.TerminalNode[];
    ASSIGN(i: number): antlr.TerminalNode | null;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext | null;
    column_name_list(): Column_name_listContext[];
    column_name_list(i: number): Column_name_listContext | null;
    with_clause(): With_clauseContext | null;
    OR_(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    FROM_(): antlr.TerminalNode | null;
    WHERE_(): antlr.TerminalNode | null;
    returning_clause(): Returning_clauseContext | null;
    ROLLBACK_(): antlr.TerminalNode | null;
    ABORT_(): antlr.TerminalNode | null;
    REPLACE_(): antlr.TerminalNode | null;
    FAIL_(): antlr.TerminalNode | null;
    IGNORE_(): antlr.TerminalNode | null;
    table_or_subquery(): Table_or_subqueryContext[];
    table_or_subquery(i: number): Table_or_subqueryContext | null;
    join_clause(): Join_clauseContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Column_name_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAR(): antlr.TerminalNode;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext | null;
    CLOSE_PAR(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Update_stmt_limitedContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    UPDATE_(): antlr.TerminalNode;
    qualified_table_name(): Qualified_table_nameContext;
    SET_(): antlr.TerminalNode;
    ASSIGN(): antlr.TerminalNode[];
    ASSIGN(i: number): antlr.TerminalNode | null;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext | null;
    column_name_list(): Column_name_listContext[];
    column_name_list(i: number): Column_name_listContext | null;
    with_clause(): With_clauseContext | null;
    OR_(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    WHERE_(): antlr.TerminalNode | null;
    returning_clause(): Returning_clauseContext | null;
    limit_stmt(): Limit_stmtContext | null;
    ROLLBACK_(): antlr.TerminalNode | null;
    ABORT_(): antlr.TerminalNode | null;
    REPLACE_(): antlr.TerminalNode | null;
    FAIL_(): antlr.TerminalNode | null;
    IGNORE_(): antlr.TerminalNode | null;
    order_by_stmt(): Order_by_stmtContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Qualified_table_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    table_name(): Table_nameContext;
    schema_name(): Schema_nameContext | null;
    DOT(): antlr.TerminalNode | null;
    AS_(): antlr.TerminalNode | null;
    alias(): AliasContext | null;
    INDEXED_(): antlr.TerminalNode | null;
    BY_(): antlr.TerminalNode | null;
    index_name(): Index_nameContext | null;
    NOT_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Vacuum_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    VACUUM_(): antlr.TerminalNode;
    schema_name(): Schema_nameContext | null;
    INTO_(): antlr.TerminalNode | null;
    filename(): FilenameContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Filter_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FILTER_(): antlr.TerminalNode;
    OPEN_PAR(): antlr.TerminalNode;
    WHERE_(): antlr.TerminalNode;
    expr(): ExprContext;
    CLOSE_PAR(): antlr.TerminalNode;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Window_defnContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAR(): antlr.TerminalNode;
    CLOSE_PAR(): antlr.TerminalNode;
    ORDER_(): antlr.TerminalNode | null;
    BY_(): antlr.TerminalNode[];
    BY_(i: number): antlr.TerminalNode | null;
    ordering_term(): Ordering_termContext[];
    ordering_term(i: number): Ordering_termContext | null;
    base_window_name(): Base_window_nameContext | null;
    PARTITION_(): antlr.TerminalNode | null;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    frame_spec(): Frame_specContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Over_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OVER_(): antlr.TerminalNode;
    window_name(): Window_nameContext | null;
    OPEN_PAR(): antlr.TerminalNode | null;
    CLOSE_PAR(): antlr.TerminalNode | null;
    base_window_name(): Base_window_nameContext | null;
    PARTITION_(): antlr.TerminalNode | null;
    BY_(): antlr.TerminalNode[];
    BY_(i: number): antlr.TerminalNode | null;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    ORDER_(): antlr.TerminalNode | null;
    ordering_term(): Ordering_termContext[];
    ordering_term(i: number): Ordering_termContext | null;
    frame_spec(): Frame_specContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Frame_specContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    frame_clause(): Frame_clauseContext;
    EXCLUDE_(): antlr.TerminalNode | null;
    NO_(): antlr.TerminalNode | null;
    OTHERS_(): antlr.TerminalNode | null;
    CURRENT_(): antlr.TerminalNode | null;
    ROW_(): antlr.TerminalNode | null;
    GROUP_(): antlr.TerminalNode | null;
    TIES_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Frame_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RANGE_(): antlr.TerminalNode | null;
    ROWS_(): antlr.TerminalNode | null;
    GROUPS_(): antlr.TerminalNode | null;
    frame_single(): Frame_singleContext | null;
    BETWEEN_(): antlr.TerminalNode | null;
    frame_left(): Frame_leftContext | null;
    AND_(): antlr.TerminalNode | null;
    frame_right(): Frame_rightContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Simple_function_invocationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    simple_func(): Simple_funcContext;
    OPEN_PAR(): antlr.TerminalNode;
    CLOSE_PAR(): antlr.TerminalNode;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    STAR(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Aggregate_function_invocationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    aggregate_func(): Aggregate_funcContext;
    OPEN_PAR(): antlr.TerminalNode;
    CLOSE_PAR(): antlr.TerminalNode;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    STAR(): antlr.TerminalNode | null;
    filter_clause(): Filter_clauseContext | null;
    DISTINCT_(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Window_function_invocationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    window_function(): Window_functionContext;
    OPEN_PAR(): antlr.TerminalNode;
    CLOSE_PAR(): antlr.TerminalNode;
    OVER_(): antlr.TerminalNode;
    window_defn(): Window_defnContext | null;
    window_name(): Window_nameContext | null;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    STAR(): antlr.TerminalNode | null;
    filter_clause(): Filter_clauseContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Common_table_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH_(): antlr.TerminalNode;
    common_table_expression(): Common_table_expressionContext[];
    common_table_expression(i: number): Common_table_expressionContext | null;
    RECURSIVE_(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Order_by_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ORDER_(): antlr.TerminalNode;
    BY_(): antlr.TerminalNode;
    ordering_term(): Ordering_termContext[];
    ordering_term(i: number): Ordering_termContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Limit_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LIMIT_(): antlr.TerminalNode;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    OFFSET_(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Ordering_termContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext;
    COLLATE_(): antlr.TerminalNode | null;
    collation_name(): Collation_nameContext | null;
    asc_desc(): Asc_descContext | null;
    NULLS_(): antlr.TerminalNode | null;
    FIRST_(): antlr.TerminalNode | null;
    LAST_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Asc_descContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ASC_(): antlr.TerminalNode | null;
    DESC_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Frame_leftContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext | null;
    PRECEDING_(): antlr.TerminalNode | null;
    FOLLOWING_(): antlr.TerminalNode | null;
    CURRENT_(): antlr.TerminalNode | null;
    ROW_(): antlr.TerminalNode | null;
    UNBOUNDED_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Frame_rightContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext | null;
    PRECEDING_(): antlr.TerminalNode | null;
    FOLLOWING_(): antlr.TerminalNode | null;
    CURRENT_(): antlr.TerminalNode | null;
    ROW_(): antlr.TerminalNode | null;
    UNBOUNDED_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Frame_singleContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext | null;
    PRECEDING_(): antlr.TerminalNode | null;
    UNBOUNDED_(): antlr.TerminalNode | null;
    CURRENT_(): antlr.TerminalNode | null;
    ROW_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Window_functionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAR(): antlr.TerminalNode[];
    OPEN_PAR(i: number): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    CLOSE_PAR(): antlr.TerminalNode[];
    CLOSE_PAR(i: number): antlr.TerminalNode | null;
    OVER_(): antlr.TerminalNode;
    order_by_expr_asc_desc(): Order_by_expr_asc_descContext | null;
    FIRST_VALUE_(): antlr.TerminalNode | null;
    LAST_VALUE_(): antlr.TerminalNode | null;
    partition_by(): Partition_byContext | null;
    frame_clause(): Frame_clauseContext | null;
    CUME_DIST_(): antlr.TerminalNode | null;
    PERCENT_RANK_(): antlr.TerminalNode | null;
    order_by_expr(): Order_by_exprContext | null;
    DENSE_RANK_(): antlr.TerminalNode | null;
    RANK_(): antlr.TerminalNode | null;
    ROW_NUMBER_(): antlr.TerminalNode | null;
    LAG_(): antlr.TerminalNode | null;
    LEAD_(): antlr.TerminalNode | null;
    offset(): OffsetContext | null;
    default_value(): Default_valueContext | null;
    NTH_VALUE_(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode | null;
    signed_number(): Signed_numberContext | null;
    NTILE_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class OffsetContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COMMA(): antlr.TerminalNode;
    signed_number(): Signed_numberContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Default_valueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COMMA(): antlr.TerminalNode;
    signed_number(): Signed_numberContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Partition_byContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PARTITION_(): antlr.TerminalNode;
    BY_(): antlr.TerminalNode;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Order_by_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ORDER_(): antlr.TerminalNode;
    BY_(): antlr.TerminalNode;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Order_by_expr_asc_descContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ORDER_(): antlr.TerminalNode;
    BY_(): antlr.TerminalNode;
    expr_asc_desc(): Expr_asc_descContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Expr_asc_descContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    asc_desc(): Asc_descContext[];
    asc_desc(i: number): Asc_descContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Initial_selectContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    select_stmt(): Select_stmtContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Recursive_selectContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    select_stmt(): Select_stmtContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Unary_operatorContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    MINUS(): antlr.TerminalNode | null;
    PLUS(): antlr.TerminalNode | null;
    TILDE(): antlr.TerminalNode | null;
    NOT_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Error_messageContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    STRING_LITERAL(): antlr.TerminalNode;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Module_argumentContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext | null;
    column_def(): Column_defContext | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Column_aliasContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    IDENTIFIER(): antlr.TerminalNode | null;
    STRING_LITERAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class KeywordContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ABORT_(): antlr.TerminalNode | null;
    ACTION_(): antlr.TerminalNode | null;
    ADD_(): antlr.TerminalNode | null;
    AFTER_(): antlr.TerminalNode | null;
    ALL_(): antlr.TerminalNode | null;
    ALTER_(): antlr.TerminalNode | null;
    ANALYZE_(): antlr.TerminalNode | null;
    AND_(): antlr.TerminalNode | null;
    AS_(): antlr.TerminalNode | null;
    ASC_(): antlr.TerminalNode | null;
    ATTACH_(): antlr.TerminalNode | null;
    AUTOINCREMENT_(): antlr.TerminalNode | null;
    BEFORE_(): antlr.TerminalNode | null;
    BEGIN_(): antlr.TerminalNode | null;
    BETWEEN_(): antlr.TerminalNode | null;
    BY_(): antlr.TerminalNode | null;
    CASCADE_(): antlr.TerminalNode | null;
    CASE_(): antlr.TerminalNode | null;
    CAST_(): antlr.TerminalNode | null;
    CHECK_(): antlr.TerminalNode | null;
    COLLATE_(): antlr.TerminalNode | null;
    COLUMN_(): antlr.TerminalNode | null;
    COMMIT_(): antlr.TerminalNode | null;
    CONFLICT_(): antlr.TerminalNode | null;
    CONSTRAINT_(): antlr.TerminalNode | null;
    CREATE_(): antlr.TerminalNode | null;
    CROSS_(): antlr.TerminalNode | null;
    CURRENT_DATE_(): antlr.TerminalNode | null;
    CURRENT_TIME_(): antlr.TerminalNode | null;
    CURRENT_TIMESTAMP_(): antlr.TerminalNode | null;
    DATABASE_(): antlr.TerminalNode | null;
    DEFAULT_(): antlr.TerminalNode | null;
    DEFERRABLE_(): antlr.TerminalNode | null;
    DEFERRED_(): antlr.TerminalNode | null;
    DELETE_(): antlr.TerminalNode | null;
    DESC_(): antlr.TerminalNode | null;
    DETACH_(): antlr.TerminalNode | null;
    DISTINCT_(): antlr.TerminalNode | null;
    DROP_(): antlr.TerminalNode | null;
    EACH_(): antlr.TerminalNode | null;
    ELSE_(): antlr.TerminalNode | null;
    END_(): antlr.TerminalNode | null;
    ESCAPE_(): antlr.TerminalNode | null;
    EXCEPT_(): antlr.TerminalNode | null;
    EXCLUSIVE_(): antlr.TerminalNode | null;
    EXISTS_(): antlr.TerminalNode | null;
    EXPLAIN_(): antlr.TerminalNode | null;
    FAIL_(): antlr.TerminalNode | null;
    FOR_(): antlr.TerminalNode | null;
    FOREIGN_(): antlr.TerminalNode | null;
    FROM_(): antlr.TerminalNode | null;
    FULL_(): antlr.TerminalNode | null;
    GLOB_(): antlr.TerminalNode | null;
    GROUP_(): antlr.TerminalNode | null;
    HAVING_(): antlr.TerminalNode | null;
    IF_(): antlr.TerminalNode | null;
    IGNORE_(): antlr.TerminalNode | null;
    IMMEDIATE_(): antlr.TerminalNode | null;
    IN_(): antlr.TerminalNode | null;
    INDEX_(): antlr.TerminalNode | null;
    INDEXED_(): antlr.TerminalNode | null;
    INITIALLY_(): antlr.TerminalNode | null;
    INNER_(): antlr.TerminalNode | null;
    INSERT_(): antlr.TerminalNode | null;
    INSTEAD_(): antlr.TerminalNode | null;
    INTERSECT_(): antlr.TerminalNode | null;
    INTO_(): antlr.TerminalNode | null;
    IS_(): antlr.TerminalNode | null;
    ISNULL_(): antlr.TerminalNode | null;
    JOIN_(): antlr.TerminalNode | null;
    KEY_(): antlr.TerminalNode | null;
    LEFT_(): antlr.TerminalNode | null;
    LIKE_(): antlr.TerminalNode | null;
    LIMIT_(): antlr.TerminalNode | null;
    MATCH_(): antlr.TerminalNode | null;
    NATURAL_(): antlr.TerminalNode | null;
    NO_(): antlr.TerminalNode | null;
    NOT_(): antlr.TerminalNode | null;
    NOTNULL_(): antlr.TerminalNode | null;
    NULL_(): antlr.TerminalNode | null;
    OF_(): antlr.TerminalNode | null;
    OFFSET_(): antlr.TerminalNode | null;
    ON_(): antlr.TerminalNode | null;
    OR_(): antlr.TerminalNode | null;
    ORDER_(): antlr.TerminalNode | null;
    OUTER_(): antlr.TerminalNode | null;
    PLAN_(): antlr.TerminalNode | null;
    PRAGMA_(): antlr.TerminalNode | null;
    PRIMARY_(): antlr.TerminalNode | null;
    QUERY_(): antlr.TerminalNode | null;
    RAISE_(): antlr.TerminalNode | null;
    RECURSIVE_(): antlr.TerminalNode | null;
    REFERENCES_(): antlr.TerminalNode | null;
    REGEXP_(): antlr.TerminalNode | null;
    REINDEX_(): antlr.TerminalNode | null;
    RELEASE_(): antlr.TerminalNode | null;
    RENAME_(): antlr.TerminalNode | null;
    REPLACE_(): antlr.TerminalNode | null;
    RESTRICT_(): antlr.TerminalNode | null;
    RIGHT_(): antlr.TerminalNode | null;
    ROLLBACK_(): antlr.TerminalNode | null;
    ROW_(): antlr.TerminalNode | null;
    ROWS_(): antlr.TerminalNode | null;
    SAVEPOINT_(): antlr.TerminalNode | null;
    SELECT_(): antlr.TerminalNode | null;
    SET_(): antlr.TerminalNode | null;
    TABLE_(): antlr.TerminalNode | null;
    TEMP_(): antlr.TerminalNode | null;
    TEMPORARY_(): antlr.TerminalNode | null;
    THEN_(): antlr.TerminalNode | null;
    TO_(): antlr.TerminalNode | null;
    TRANSACTION_(): antlr.TerminalNode | null;
    TRIGGER_(): antlr.TerminalNode | null;
    UNION_(): antlr.TerminalNode | null;
    UNIQUE_(): antlr.TerminalNode | null;
    UPDATE_(): antlr.TerminalNode | null;
    USING_(): antlr.TerminalNode | null;
    VACUUM_(): antlr.TerminalNode | null;
    VALUES_(): antlr.TerminalNode | null;
    VIEW_(): antlr.TerminalNode | null;
    VIRTUAL_(): antlr.TerminalNode | null;
    WHEN_(): antlr.TerminalNode | null;
    WHERE_(): antlr.TerminalNode | null;
    WITH_(): antlr.TerminalNode | null;
    WITHOUT_(): antlr.TerminalNode | null;
    FIRST_VALUE_(): antlr.TerminalNode | null;
    OVER_(): antlr.TerminalNode | null;
    PARTITION_(): antlr.TerminalNode | null;
    RANGE_(): antlr.TerminalNode | null;
    PRECEDING_(): antlr.TerminalNode | null;
    UNBOUNDED_(): antlr.TerminalNode | null;
    CURRENT_(): antlr.TerminalNode | null;
    FOLLOWING_(): antlr.TerminalNode | null;
    CUME_DIST_(): antlr.TerminalNode | null;
    DENSE_RANK_(): antlr.TerminalNode | null;
    LAG_(): antlr.TerminalNode | null;
    LAST_VALUE_(): antlr.TerminalNode | null;
    LEAD_(): antlr.TerminalNode | null;
    NTH_VALUE_(): antlr.TerminalNode | null;
    NTILE_(): antlr.TerminalNode | null;
    PERCENT_RANK_(): antlr.TerminalNode | null;
    RANK_(): antlr.TerminalNode | null;
    ROW_NUMBER_(): antlr.TerminalNode | null;
    GENERATED_(): antlr.TerminalNode | null;
    ALWAYS_(): antlr.TerminalNode | null;
    STORED_(): antlr.TerminalNode | null;
    TRUE_(): antlr.TerminalNode | null;
    FALSE_(): antlr.TerminalNode | null;
    WINDOW_(): antlr.TerminalNode | null;
    NULLS_(): antlr.TerminalNode | null;
    FIRST_(): antlr.TerminalNode | null;
    LAST_(): antlr.TerminalNode | null;
    FILTER_(): antlr.TerminalNode | null;
    GROUPS_(): antlr.TerminalNode | null;
    EXCLUDE_(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class NameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Function_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Schema_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Table_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Table_or_index_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Column_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Collation_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Foreign_tableContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Index_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Trigger_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class View_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Module_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Pragma_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Savepoint_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Table_aliasContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Transaction_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Window_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class AliasContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class FilenameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Base_window_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Simple_funcContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Aggregate_funcContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Table_function_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    any_name(): Any_nameContext;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
export declare class Any_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    IDENTIFIER(): antlr.TerminalNode | null;
    keyword(): KeywordContext | null;
    STRING_LITERAL(): antlr.TerminalNode | null;
    OPEN_PAR(): antlr.TerminalNode | null;
    any_name(): Any_nameContext | null;
    CLOSE_PAR(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    enterRule(listener: SQLiteParserListener): void;
    exitRule(listener: SQLiteParserListener): void;
    accept<Result>(visitor: SQLiteParserVisitor<Result>): Result | null;
}
